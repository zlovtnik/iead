name: Church Management CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, develop ]

# Required permissions for security scanning and SARIF uploads
permissions:
  contents: read
  security-events: write
  actions: read
  id-token: write
  packages: write

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Lua
        uses: leafo/gh-actions-lua@v9
        with:
          luaVersion: "5.4"
          buildCache: false  # Disable build cache to avoid cache service errors
      
      - name: Set up LuaRocks
        uses: leafo/gh-actions-luarocks@v4
      
      - name: Install luacheck
        run: luarocks install luacheck
      
      - name: Run luacheck
        run: |
          luacheck --no-color src app.lua || {
            echo "::warning::Linting found issues, but continuing the workflow"
            echo "Linting warnings are treated as non-blocking"
            exit 0
          }

  test:
    name: Run Tests
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Lua
        uses: leafo/gh-actions-lua@v9
        with:
          luaVersion: "5.4"
          buildCache: false  # Disable build cache to avoid cache service errors
      
      - name: Set up LuaRocks
        uses: leafo/gh-actions-luarocks@v4
        
      - name: Install dependencies
        run: |
          luarocks install luasql-sqlite3
          luarocks install lua-cjson
          luarocks install luasocket
          luarocks install --only-deps church-management-1.0-1.rockspec
      
      - name: Initialize database
        run: lua -e "require('src.db.schema').init()"
      
      - name: Check if tests exist
        id: check_tests
        run: |
          if [ -f "src/tests/run_all.lua" ]; then
            echo "tests_exist=true" >> $GITHUB_OUTPUT
          else
            echo "tests_exist=false" >> $GITHUB_OUTPUT
            echo "::warning::Test module 'src.tests.run_all' not found. Skipping tests."
          fi
      
      - name: Run tests
        if: steps.check_tests.outputs.tests_exist == 'true'
        run: lua -e "require('src.tests.run_all')"
      
      - name: Create coverage directory if tests don't exist
        if: steps.check_tests.outputs.tests_exist != 'true'
        run: mkdir -p coverage
      
      - name: Upload test coverage
        uses: actions/upload-artifact@v4
        with:
          name: test-coverage
          path: coverage/

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Run Trivy vulnerability scanner for filesystem
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-fs-results.sarif'
          severity: 'CRITICAL,HIGH'
      
      # Note: This step will fail if code scanning is not enabled in the repository settings
      # To enable: Go to your repository → Settings → Security → Code security and analysis → Code scanning → Set up → Advanced → Enable 'GitHub Advanced Security'
      - name: Upload filesystem scan results
        uses: github/codeql-action/upload-sarif@v3
        continue-on-error: true  # Don't fail the workflow if code scanning is not enabled
        with:
          sarif_file: 'trivy-fs-results.sarif'
          category: 'trivy-fs'
          wait-for-processing: true

  build:
    name: Build Application
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Set up Lua
        uses: leafo/gh-actions-lua@v9
        with:
          luaVersion: "5.4"
          buildCache: false  # Disable build cache to avoid cache service errors
      
      - name: Set up LuaRocks
        uses: leafo/gh-actions-luarocks@v4
      
      - name: Install dependencies
        run: |
          luarocks install luasql-sqlite3
          luarocks install lua-cjson
          luarocks install luasocket
      
      - name: Build application
        run: ./build.sh --no-docker
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: church-management-dist
          path: dist/

  docker:
    name: Build & Push Docker Image
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,format=short
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile.production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Run Trivy vulnerability scanner on Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ghcr.io/${{ github.repository }}:${{ steps.meta.outputs.version }}'
          format: 'sarif'
          output: 'trivy-image-results.sarif'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
      
      # Note: This step will fail if code scanning is not enabled in the repository settings
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        continue-on-error: true  # Don't fail the workflow if code scanning is not enabled
        with:
          sarif_file: 'trivy-image-results.sarif'
          category: 'trivy-container'
          wait-for-processing: true

  deploy-staging:
    name: Deploy to Staging
    needs: docker
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment:
      name: staging
      url: https://staging.church-management.example.com
    steps:
      - name: Check required secrets
        id: check_secrets
        run: |
          if [[ -n "${{ secrets.STAGING_HOST }}" && -n "${{ secrets.DEPLOY_USERNAME }}" && -n "${{ secrets.DEPLOY_KEY }}" ]]; then
            echo "secrets_available=true" >> $GITHUB_OUTPUT
          else
            echo "secrets_available=false" >> $GITHUB_OUTPUT
            echo "::warning::Required deployment secrets are not configured. Skipping deployment."
          fi
          
      - name: Deploy to staging environment
        if: steps.check_secrets.outputs.secrets_available == 'true'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.DEPLOY_USERNAME }}
          key: ${{ secrets.DEPLOY_KEY }}
          port: ${{ secrets.DEPLOY_PORT || '22' }}
          script: |
            cd /opt/church-management-staging
            docker-compose -f docker-compose.staging.yml pull
            docker-compose -f docker-compose.staging.yml up -d

  deploy-production:
    name: Deploy to Production
    needs: docker
    runs-on: ubuntu-latest
    if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || startsWith(github.ref, 'refs/tags/v')
    environment:
      name: production
      url: https://church-management.example.com
    steps:
      - name: Check required secrets
        id: check_secrets
        run: |
          if [[ -n "${{ secrets.PRODUCTION_HOST }}" && -n "${{ secrets.DEPLOY_USERNAME }}" && -n "${{ secrets.DEPLOY_KEY }}" ]]; then
            echo "secrets_available=true" >> $GITHUB_OUTPUT
          else
            echo "secrets_available=false" >> $GITHUB_OUTPUT
            echo "::warning::Required deployment secrets are not configured. Skipping production deployment."
          fi
          
      - name: Deploy to production
        if: steps.check_secrets.outputs.secrets_available == 'true'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.DEPLOY_USERNAME }}
          key: ${{ secrets.DEPLOY_KEY }}
          port: ${{ secrets.DEPLOY_PORT || '22' }}
          script: |
            cd /opt/church-management
            docker-compose -f docker-compose.production.yml pull
            docker-compose -f docker-compose.production.yml up -d

  create-release:
    name: Create GitHub Release
    needs: deploy-production
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: church-management-dist
          path: dist/
      
      - name: Generate changelog
        id: changelog
        uses: metcalfc/changelog-generator@v4.0.1
        with:
          myToken: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          body: |
            ## Church Management System ${{ github.ref_name }}
            
            ${{ steps.changelog.outputs.changelog }}
            
            ### Docker Image
            ```
            docker pull ghcr.io/${{ github.repository }}:${{ github.ref_name }}
            ```
          draft: false
          prerelease: false
